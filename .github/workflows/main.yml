name: Repository Backup and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 4 * * *'

permissions:
  contents: write

jobs:
  backup-and-release:
    runs-on: ubuntu-latest
    steps:
      # 初始化环境
      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd pv jq curl
          mkdir -p backup_temp compressed_backups
          echo "WORKSPACE=$(pwd)" >> $GITHUB_ENV
          : > success.txt; : > failed.txt

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
        
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: true
          swap-storage: true
     
     # 下载仓库列表文件
      - name: Download repository list
        run: |
          # 直接从当前仓库下载 back_ck_url.txt 文件
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3.raw" \
            -o back_ck_url.txt \
            "https://api.github.com/repos/${{ github.repository }}/contents/back_ck_url.txt"
          
          # 检查文件是否存在
          if [ ! -f back_ck_url.txt ]; then
            echo "❌ back_ck_url.txt 文件不存在或下载失败"
            exit 1
          fi
          
          echo "📋 仓库列表:"
          cat back_ck_url.txt

      # 创建发布 - 修复版本
      - name: Create release
        id: create_release
        run: |
          # 初始化一个临时 Git 仓库用于 gh 命令
          git init temp_repo
          cd temp_repo
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          tag="backup-$(date +%Y%m%d%H%M%S)"
          gh release create $tag \
            --title "📦 Backups $(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            --notes "🚧 Backup in progress..." \
            --draft
          echo "tag=$tag" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 核心备份流程
      - name: Backup repositories
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_release.outputs.tag }}
        run: |
          # 工具函数
          disk_space() { df -BM . | awk 'NR==2 {print $4}' | tr -d 'M'; }
          check_disk_space() {
            local required=$1
            local space=$(disk_space)
            if [[ $space -lt $required ]]; then
              echo "⚠️ 低磁盘空间: ${space}MB < ${required}MB"
              # 尝试上传现有文件释放空间
              for f in compressed_backups/*; do
                [[ -f "$f" ]] && gh release upload $TAG "$f" --clobber && rm -f "$f" && echo "📤 已上传并删除: $f"
              done
              # 重新检查
              space=$(disk_space)
              if [[ $space -lt $required ]]; then
                echo "❌ 磁盘空间不足，无法继续"
                return 1
              fi
            fi
            return 0
          }
          
          # 初始磁盘空间检查
          if ! check_disk_space 5000; then
            echo "❌ 初始磁盘空间不足"
            exit 1
          fi
          
          # 处理每个仓库
          while read -r url; do
            [[ -z $url || $url == \#* ]] && continue
            echo "📦 Processing: $url"
            
            # 解析URL
            if [[ $url =~ github.com[/:]([^/]+)/([^/.]+) ]]; then
              owner=${BASH_REMATCH[1]}
              repo=${BASH_REMATCH[2]%.git}
              dir="backup_temp/$owner-$repo"
              file="compressed_backups/$owner-$repo-$(date +%s).tar.zst"
              
              # 磁盘检查
              if ! check_disk_space 2000; then
                echo "$owner/$repo" >> failed.txt
                echo "❌ 磁盘空间不足，跳过仓库"
                continue
              fi
              
              # 克隆仓库 (带进度显示和重试机制)
              max_retries=3
              retry_count=0
              clone_success=false
              
              while [[ $retry_count -lt $max_retries && $clone_success == false ]]; do
                retry_count=$((retry_count+1))
                echo "🔄 克隆仓库 (尝试 $retry_count/$max_retries)..."
                rm -rf "$dir" 2>/dev/null || true
                
                if timeout 600 git clone --mirror "$url" "$dir" 2>&1 | tee clone.log; then
                  clone_success=true
                  echo "✅ 克隆成功"
                else
                  echo "❌ 克隆失败，等待重试..."
                  sleep $((retry_count * 5))
                fi
              done
              
              if [[ $clone_success == false ]]; then
                echo "$owner/$repo" >> failed.txt
                echo "❌ 克隆失败，跳过仓库"
                continue
              fi
              
              # 检查克隆大小
              repo_size=$(du -sm "$dir" | cut -f1)
              echo "📊 仓库大小: ${repo_size}MB"
              
              # 磁盘空间二次检查 (考虑压缩所需空间)
              required_space=$((repo_size * 2 + 100)) # 额外100MB缓冲
              if ! check_disk_space $required_space; then
                echo "$owner/$repo" >> failed.txt
                echo "❌ 压缩空间不足，跳过"
                rm -rf "$dir"
                continue
              fi
              
              # 压缩仓库 (使用pv显示进度)
              echo "🗜️ 压缩仓库..."
              mkdir -p compressed_backups
              if (cd "$dir" && tar cf - . | pv -s ${repo_size}m | zstd -10 -T0 > "${WORKSPACE}/$file"); then
                echo "$owner/$repo" >> success.txt
                rm -rf "$dir"
                
                # 检查压缩文件
                if [[ ! -f "${WORKSPACE}/$file" ]]; then
                  echo "❌ 压缩文件未创建"
                  echo "$owner/$repo" >> failed.txt
                  continue
                fi
                
                # 文件大小检查
                file_size=$(du -m "${WORKSPACE}/$file" | cut -f1)
                
                # 分卷压缩逻辑（超过1.8GB时）
                if [[ $file_size -gt 1800 ]]; then
                  echo "✂️ 文件过大 (${file_size}MB)，进行分卷处理..."
                  
                  # 分卷设置（每个分卷1.8GB）
                  split -b 1800M -d -a 3 "${WORKSPACE}/$file" "${WORKSPACE}/$file.part"
                  
                  # 上传分卷文件
                  for part_file in "${WORKSPACE}/$file.part"*; do
                    echo "⬆️ 上传分卷: $(basename "$part_file")"
                    if gh release upload $TAG "$part_file" --clobber; then
                      rm -f "$part_file"
                    else
                      echo "⚠️ 分卷上传失败，保留文件稍后上传"
                    fi
                  done
                  
                  # 删除原始大文件
                  rm -f "${WORKSPACE}/$file"
                else
                  # 普通文件上传
                  echo "⬆️ 上传文件 (${file_size}MB)..."
                  if gh release upload $TAG "${WORKSPACE}/$file" --clobber; then
                    rm -f "${WORKSPACE}/$file"
                  else
                    echo "⚠️ 上传失败，保留文件稍后上传"
                  fi
                fi
              else
                echo "$owner/$repo" >> failed.txt
                echo "❌ 压缩失败"
                [[ -f "${WORKSPACE}/$file" ]] && rm -f "${WORKSPACE}/$file"
                rm -rf "$dir"
              fi
            else
              echo "$url" >> failed.txt
              echo "❌ 无效URL格式"
            fi
          done < back_ck_url.txt

      # 上传剩余文件
      - name: Upload remaining
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_release.outputs.tag }}
        run: |
          max_retries=3
          for file in compressed_backups/*; do
            if [[ -f "$file" ]]; then
              echo "⬆️ 上传剩余文件: $(basename "$file")"
              retry_count=0
              uploaded=false
              
              while [[ $retry_count -lt $max_retries && $uploaded == false ]]; do
                if gh release upload $TAG "$file" --clobber; then
                  rm -f "$file"
                  uploaded=true
                  echo "✅ 上传成功"
                else
                  retry_count=$((retry_count+1))
                  echo "❌ 上传失败，重试 $retry_count/$max_retries"
                  sleep 5
                fi
              done
              
              if [[ $uploaded == false ]]; then
                echo "❌ 最终上传失败: $(basename "$file")"
              fi
            fi
          done

      # 生成报告
      - name: Generate report
        id: report
        run: |
          # 确保文件存在
          touch success.txt failed.txt
          
          # 获取计数
          success_count=$(wc -l < success.txt | tr -d ' ' || echo 0)
          failed_count=$(wc -l < failed.txt | tr -d ' ' || echo 0)
          total=$((success_count + failed_count))
          
          # 创建简洁报告
          report="# 📊 Backup Summary\n\n"
          report+="## ✅ Successfully Backed Up ($success_count)\n"
          if [[ $success_count -gt 0 ]]; then
            report+="\`\`\`\n"
            report+=$(cat success.txt)
            report+="\n\`\`\`\n"
          else
            report+="> No repositories backed up successfully\n"
          fi
          
          report+="\n## ❌ Failed to Backup ($failed_count)\n"
          if [[ $failed_count -gt 0 ]]; then
            report+="\`\`\`\n"
            report+=$(cat failed.txt)
            report+="\n\`\`\`\n"
          else
            report+="> All repositories backed up successfully!\n"
          fi
          
          report+="\n---\n"
          report+="⏱️ Generated at $(date -u +'%Y-%m-%d %H:%M:%S UTC')\n"
          report+="ℹ️ Total repositories: $total"
          
          # 编码输出
          report="${report//'%'/'%25'}"
          report="${report//$'\n'/'%0A'}"
          echo "report=$report" >> $GITHUB_OUTPUT
          echo "success=$success_count" >> $GITHUB_OUTPUT
          echo "failed=$failed_count" >> $GITHUB_OUTPUT

      # 发布最终版本
      - name: Publish release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.create_release.outputs.tag }}
          REPORT: ${{ steps.report.outputs.report }}
        run: |
          # 初始化一个临时 Git 仓库用于 gh 命令
          git init temp_repo
          cd temp_repo
          git config user.email "action@github.com"
          git config user.name "GitHub Action"
          
          body="${REPORT//'%0A'/$'\n'}"
          body="${body//'%25'/'%'}"
          gh release edit $TAG --notes "$body" --draft=false

      # 状态摘要
      - name: Status summary
        run: |
          echo "## 备份结果" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 成功: ${{ steps.report.outputs.success }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ 失败: ${{ steps.report.outputs.failed }}" >> $GITHUB_STEP_SUMMARY
          url="https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ steps.create_release.outputs.tag }}"
          echo "📦 [查看发布]($url)" >> $GITHUB_STEP_SUMMARY
          
      # 清理工作区
      - name: Cleanup workspace
        run: |
          rm -rf backup_temp compressed_backups success.txt failed.txt back_ck_url.txt temp_repo
          echo "🧹 工作区已清理"
