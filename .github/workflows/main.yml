name: Repository Backup and Release

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
  schedule:
    - cron: '0 0 * * *'  # ÊØèÂ§©UTCÊó∂Èó¥0ÁÇπËá™Âä®ËøêË°å

permissions:
  contents: write  # ÂÖÅËÆ∏ÂàõÂª∫Release

jobs:
  backup-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          # ÂàõÂª∫Â∑•‰ΩúÁõÆÂΩï
          mkdir -p backup_temp
          # ÂàõÂª∫ÊàêÂäüÂ§á‰ªΩËÆ∞ÂΩïÊñá‰ª∂
          echo "" > success_backups.txt
          # ÂàõÂª∫Â§±Ë¥•ËÆ∞ÂΩïÊñá‰ª∂
          echo "" > failed_backups.txt
          # ÂàõÂª∫ÂéãÁº©ÂåÖÁõÆÂΩï
          mkdir -p compressed_backups

      - name: Backup and compress repositories
        id: backup
        run: |
          # ÂÆâË£Öxz-utilsÁî®‰∫éÊúÄÈ´òÂéãÁº©Á∫ßÂà´
          sudo apt-get update
          sudo apt-get install -y xz-utils
          
          # Â§ÑÁêÜÊØè‰∏™‰ªìÂ∫ìURL
          while IFS= read -r repo_url; do
            # Ë∑≥ËøáÁ©∫Ë°åÂíåÊ≥®Èáä
            [[ -z "$repo_url" || "$repo_url" == \#* ]] && continue
            
            echo "üì¶ Processing: $repo_url"
            
            # ‰ªéURLËß£ÊûêownerÂíårepoÂêçÁß∞
            if [[ $repo_url =~ github.com[/:]([^/]+)/([^/.]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]%.git}"  # ÁßªÈô§.gitÂêéÁºÄ
              backup_dir="backup_temp/$owner-$repo"
              compressed_file="compressed_backups/$owner-$repo-$(date +%Y%m%d-%H%M%S).tar.xz"
              
              # Â§á‰ªΩÁä∂ÊÄÅÂíåÈáçËØïËÆ°Êï∞Âô®
              status=1
              retry_count=0
              max_retries=3
              
              # ÈáçËØïÂæ™ÁéØ
              while [ $status -ne 0 ] && [ $retry_count -lt $max_retries ]; do
                # Â§á‰ªΩÈÄªËæë
                echo "üîÑ Cloning repository (attempt $((retry_count+1))..."
                # Á°Æ‰øùÁõÆÂΩï‰∏çÂ≠òÂú®
                rm -rf "$backup_dir" 2>/dev/null || true
                # ÂÆåÊï¥ÂÖãÈöÜ‰ªìÂ∫ì
                git clone --mirror "$repo_url" "$backup_dir" 2>&1 | sed 's/^/    /'
                status=$?
                
                # Ê£ÄÊü•Áä∂ÊÄÅ
                if [ $status -eq 0 ]; then
                  echo "‚úÖ Clone success on attempt $((retry_count+1)): $repo_url"
                  
                  # ÂàõÂª∫ÊúÄÈ´òÂéãÁº©Á∫ßÂà´ÁöÑÂΩíÊ°£
                  echo "üíæ Compressing with maximum compression (XZ -9e)..."
                  (
                    cd "$backup_dir"
                    # ‰ΩøÁî®ÊúÄÈ´òÂéãÁº©Á∫ßÂà´ (XZ -9e)
                    tar cf - . | xz -9e -T0 > "../$compressed_file"
                  )
                  
                  # Ê£ÄÊü•ÂéãÁº©Êñá‰ª∂Â§ßÂ∞è
                  file_size=$(du -h "$compressed_file" | cut -f1)
                  echo "üì¶ Created compressed backup: $compressed_file ($file_size)"
                  
                  # ËÆ∞ÂΩïÊàêÂäüÂ§á‰ªΩÁöÑ‰ªìÂ∫ì
                  echo "$owner/$repo" >> success_backups.txt
                  break
                else
                  echo "‚ö†Ô∏è Attempt $((retry_count+1)) failed for $repo_url"
                  retry_count=$((retry_count+1))
                  
                  # Â¶ÇÊûú‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØïÔºåÁ≠âÂæÖ5ÁßíÂÜçÈáçËØï
                  if [ $retry_count -lt $max_retries ]; then
                    echo "‚è≥ Waiting 5 seconds before retry..."
                    sleep 5
                  fi
                fi
              done
              
              # Â¶ÇÊûúÊúÄÁªàÂ§±Ë¥•
              if [ $status -ne 0 ]; then
                echo "‚ùå Backup failed after $max_retries attempts for $repo_url"
                # ËÆ∞ÂΩïÂ§±Ë¥•Â§á‰ªΩ
                echo "$owner/$repo" >> failed_backups.txt
              fi
              
              # Ê∏ÖÁêÜ‰∏¥Êó∂ÁõÆÂΩï
              rm -rf "$backup_dir" 2>/dev/null || true
            else
              echo "‚ö†Ô∏è Invalid URL: $repo_url"
              echo "$repo_url (invalid)" >> failed_backups.txt
            fi
            echo "--------------------------------------------------"
          done < back_ck_url.txt

      - name: Create Release
        id: create_release
        if: success() || failure()  # Âç≥‰ΩøÈÉ®ÂàÜÂ§±Ë¥•‰πüÂ∞ùËØïÂàõÂª∫Release
        uses: actions/create-release@v1
        with:
          tag_name: backup-$(date +%Y%m%d-%H%M%S)
          release_name: "üì¶ Repository Backups $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          body: |
            ### üöÄ Automated Repository Backups
            - ‚úÖ Successfully backed up: ${{ steps.backup.outputs.success_count }} repositories
            - ‚ùå Failed to backup: ${{ steps.backup.outputs.failed_count }} repositories
            - üïí Generated at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')
            
            #### üîç Backup Details:
            ${{ steps.backup.outputs.release_body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Backup Assets
        if: success() || failure()
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./compressed_backups/
          asset_name: ${{ github.event.repository.name }}-backups
          asset_content_type: application/x-xz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Release Summary
        id: release_summary
        run: |
          # ËÆ°ÁÆóÊàêÂäüÂíåÂ§±Ë¥•Êï∞Èáè
          success_count=$(grep -c . success_backups.txt 2>/dev/null || echo 0)
          failed_count=$(grep -c . failed_backups.txt 2>/dev/null || echo 0)
          
          # ÁîüÊàêReleaseÊ≠£Êñá
          release_body="#### üìä Backup Summary\n"
          release_body+="| Status | Repository | Size |\n"
          release_body+="|--------|------------|------|\n"
          
          # Ê∑ªÂä†ÊàêÂäüÂ§á‰ªΩ‰ø°ÊÅØ
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                # Ëé∑ÂèñÂéãÁº©Êñá‰ª∂Âêç
                owner_repo="${repo/\//-}"
                compressed_file=$(ls compressed_backups/$owner_repo-*.tar.xz 2>/dev/null | head -1)
                
                # Ëé∑ÂèñÊñá‰ª∂Â§ßÂ∞è
                if [ -f "$compressed_file" ]; then
                  file_size=$(du -h "$compressed_file" | cut -f1)
                  release_body+="| ‚úÖ | $repo | $file_size |\n"
                else
                  release_body+="| ‚úÖ | $repo | N/A |\n"
                fi
              fi
            done < success_backups.txt
          fi
          
          # Ê∑ªÂä†Â§±Ë¥•Â§á‰ªΩ‰ø°ÊÅØ
          if [ -s failed_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ] && [[ ! "$repo" == *"(invalid)" ]]; then
                release_body+="| ‚ùå | $repo | - |\n"
              elif [[ "$repo" == *"(invalid)" ]]; then
                release_body+="| ‚ö†Ô∏è | Invalid URL: ${repo% (invalid)} | - |\n"
              fi
            done < failed_backups.txt
          fi
          
          # Ê∑ªÂä†ÂéãÁº©Êñá‰ª∂ÂàóË°®
          release_body+="\n#### üì¶ Compressed Backup Files:\n"
          release_body+="\`\`\`\n"
          release_body+="$(ls -lh compressed_backups/ | awk '{print $9, $5}')\n"
          release_body+="\`\`\`\n"
          
          # ËÆæÁΩÆËæìÂá∫ÂèòÈáè
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Release Description
        if: success() || failure()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: release } = await github.rest.repos.getRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }}
            });
            
            // Êõ¥Êñ∞ReleaseÊèèËø∞
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              body: `${{ steps.create_release.outputs.body }}\n\n${{ steps.release_summary.outputs.release_body }}`
            });

      - name: Report status
        run: |
          # ÂàõÂª∫Â∑•‰ΩúÊµÅÊëòË¶Å
          echo "## üìä Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Repository | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|------|" >> $GITHUB_STEP_SUMMARY
          
          # Ê∑ªÂä†ÊàêÂäüÂ§á‰ªΩ
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                owner_repo="${repo/\//-}"
                compressed_file=$(ls compressed_backups/$owner_repo-*.tar.xz 2>/dev/null | head -1)
                
                if [ -f "$compressed_file" ]; then
                  file_size=$(du -h "$compressed_file" | cut -f1)
                  echo "| ‚úÖ | $repo | $file_size |" >> $GITHUB_STEP_SUMMARY
                else
                  echo "| ‚úÖ | $repo | N/A |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done < success_backups.txt
          fi
          
          # Ê∑ªÂä†Â§±Ë¥•Â§á‰ªΩ
          if [ -s failed_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ] && [[ ! "$repo" == *"(invalid)" ]]; then
                echo "| ‚ùå | $repo | - |" >> $GITHUB_STEP_SUMMARY
              elif [[ "$repo" == *"(invalid)" ]]; then
                echo "| ‚ö†Ô∏è | Invalid URL: ${repo% (invalid)} | - |" >> $GITHUB_STEP_SUMMARY
              fi
            done < failed_backups.txt
          fi
          
          # Ê∑ªÂä†ÊÄªÁªì‰ø°ÊÅØ
          success_count=${{ steps.release_summary.outputs.success_count }}
          failed_count=${{ steps.release_summary.outputs.failed_count }}
          release_url=${{ steps.create_release.outputs.html_url }}
          echo "### üìù Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Successfully backed up: $success_count repositories" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ùå Failed to backup: $failed_count repositories" >> $GITHUB_STEP_SUMMARY
          echo "- üì¶ Release created: [$release_url]($release_url)" >> $GITHUB_STEP_SUMMARY
          echo "- üïí Total processing time: $((SECONDS / 60))m $((SECONDS % 60))s" >> $GITHUB_STEP_SUMMARY
