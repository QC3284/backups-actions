name: Repository Backup and Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  backup-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4

      - name: Setup environment
        run: |
          mkdir -p backup_temp
          mkdir -p compressed_backups
          echo "" > success_backups.txt
          echo "" > failed_backups.txt

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils

      - name: Backup and compress repositories
        id: backup
        run: |
          while IFS= read -r repo_url; do
            [[ -z "$repo_url" || "$repo_url" == \#* ]] && continue
            echo "📦 Processing: $repo_url"
            
            if [[ $repo_url =~ github.com[/:]([^/]+)/([^/.]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]%.git}"
              backup_dir="backup_temp/$owner-$repo"
              
              # 确保压缩目录存在
              mkdir -p compressed_backups
              
              # 使用唯一时间戳避免冲突
              timestamp=$(date +%Y%m%d%H%M%S)
              compressed_file="compressed_backups/$owner-$repo-$timestamp.tar.xz"
              
              status=1
              retry_count=0
              max_retries=3
              
              while [ $status -ne 0 ] && [ $retry_count -lt $max_retries ]; do
                echo "🔄 Cloning repository (attempt $((retry_count+1))"
                rm -rf "$backup_dir" 2>/dev/null || true
                git clone --mirror "$repo_url" "$backup_dir" 2>&1 | sed 's/^/    /'
                status=$?
                
                if [ $status -eq 0 ]; then
                  echo "✅ Clone success"
                  
                  # 修复压缩路径问题 - 使用绝对路径
                  echo "💾 Compressing with maximum compression"
                  (
                    cd "$backup_dir"
                    # 使用当前工作目录的绝对路径
                    tar cf - . | xz -9e -T0 > "$GITHUB_WORKSPACE/$compressed_file"
                  )
                  
                  # 检查文件是否创建成功
                  if [ -f "$compressed_file" ]; then
                    file_size=$(du -h "$compressed_file" | cut -f1)
                    echo "📦 Created compressed backup: $compressed_file ($file_size)"
                    echo "$owner/$repo" >> success_backups.txt
                  else
                    echo "❌ Compression failed: file not created"
                    status=1
                    retry_count=$((retry_count+1))
                    continue
                  fi
                  break
                else
                  echo "⚠️ Attempt $((retry_count+1)) failed"
                  retry_count=$((retry_count+1))
                  if [ $retry_count -lt $max_retries ]; then
                    echo "⏳ Waiting 5 seconds before retry"
                    sleep 5
                  fi
                fi
              done
              
              if [ $status -ne 0 ]; then
                echo "❌ Backup failed after $max_retries attempts"
                echo "$owner/$repo" >> failed_backups.txt
              fi
              
              rm -rf "$backup_dir" 2>/dev/null || true
            else
              echo "⚠️ Invalid URL: $repo_url"
              echo "$repo_url (invalid)" >> failed_backups.txt
            fi
            echo "--------------------------------------------------"
          done < back_ck_url.txt

      - name: Generate Release Summary
        id: release_summary
        run: |
          success_count=$(grep -c . success_backups.txt 2>/dev/null || echo 0)
          failed_count=$(grep -c . failed_backups.txt 2>/dev/null || echo 0)
          
          release_body="#### 📊 Backup Summary\n"
          release_body+="| Status | Repository | Size |\n"
          release_body+="|--------|------------|------|\n"
          
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                owner_repo="${repo/\//-}"
                # 查找匹配的压缩文件
                compressed_file=$(ls compressed_backups/$owner_repo-*.tar.xz 2>/dev/null | head -1)
                if [ -f "$compressed_file" ]; then
                  file_size=$(du -h "$compressed_file" | cut -f1)
                  release_body+="| ✅ | $repo | $file_size |\n"
                else
                  release_body+="| ✅ | $repo | N/A |\n"
                fi
              fi
            done < success_backups.txt
          fi
          
          if [ -s failed_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ] && [[ ! "$repo" == *"(invalid)" ]]; then
                release_body+="| ❌ | $repo | - |\n"
              elif [[ "$repo" == *"(invalid)" ]]; then
                release_body+="| ⚠️ | ${repo% (invalid)} | - |\n"
              fi
            done < failed_backups.txt
          fi
          
          release_body+="\n#### 📦 Compressed Backup Files:\n"
          release_body+="\`\`\`\n"
          release_body+="$(ls -lh compressed_backups/ 2>/dev/null || echo "No files")\n"
          release_body+="\`\`\`\n"
          
          echo "success_count=$success_count" >> $GITHUB_OUTPUT
          echo "failed_count=$failed_count" >> $GITHUB_OUTPUT
          echo "release_body<<EOF" >> $GITHUB_OUTPUT
          echo -e "$release_body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        # 使用更安全的标签格式
        run: |
          TAG_NAME="backup-$(date +%Y%m%d%H%M%S)"
          gh release create "$TAG_NAME" \
            --title "📦 Repository Backups $(date -u +'%Y-%m-%d %H:%M:%S UTC')" \
            --notes "Automated repository backups" \
            --draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Backup Assets
        run: |
          TAG_NAME="backup-$(date +%Y%m%d%H%M%S)"
          for file in compressed_backups/*; do
            if [ -f "$file" ]; then
              echo "📤 Uploading $file"
              gh release upload "$TAG_NAME" "$file" \
                --repo $GITHUB_REPOSITORY \
                --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Release Description
        run: |
          TAG_NAME="backup-$(date +%Y%m%d%H%M%S)"
          # 获取当前release ID
          RELEASE_ID=$(gh api repos/$GITHUB_REPOSITORY/releases/tags/$TAG_NAME --jq '.id')
          
          # 更新release描述
          gh api repos/$GITHUB_REPOSITORY/releases/$RELEASE_ID \
            -X PATCH \
            -f body="${{ steps.release_summary.outputs.release_body }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report status
        run: |
          echo "## 📊 Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Repository | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|------|" >> $GITHUB_STEP_SUMMARY
          
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                owner_repo="${repo/\//-}"
                compressed_file=$(ls compressed_backups/$owner_repo-*.tar.xz 2>/dev/null | head -1)
                if [ -f "$compressed_file" ]; then
                  file_size=$(du -h "$compressed_file" | cut -f1)
                  echo "| ✅ | $repo | $file_size |" >> $GITHUB_STEP_SUMMARY
                else
                  echo "| ✅ | $repo | N/A |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done < success_backups.txt
          fi
          
          if [ -s failed_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ] && [[ ! "$repo" == *"(invalid)" ]]; then
                echo "| ❌ | $repo | - |" >> $GITHUB_STEP_SUMMARY
              elif [[ "$repo" == *"(invalid)" ]]; then
                echo "| ⚠️ | ${repo% (invalid)} | - |" >> $GITHUB_STEP_SUMMARY
              fi
            done < failed_backups.txt
          fi
          
          echo "### 📝 Summary" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Success: ${{ steps.release_summary.outputs.success_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ Failed: ${{ steps.release_summary.outputs.failed_count }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🕒 Time: $((SECONDS / 60))m $((SECONDS % 60))s" >> $GITHUB_STEP_SUMMARY
