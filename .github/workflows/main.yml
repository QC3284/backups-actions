name: Repository Backup Automation

on:
  workflow_dispatch:  # ÊâãÂä®Ëß¶Âèë
  schedule:
    - cron: '0 0 * * *'  # ÊØèÂ§©UTCÊó∂Èó¥0ÁÇπËá™Âä®ËøêË°å

permissions:
  contents: write  # ÂÖÅËÆ∏Êèê‰∫§Êõ¥Êîπ

jobs:
  backup-repositories:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ëé∑ÂèñÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩï
          ref: ${{ github.ref }}  # ÊòéÁ°ÆÊåáÂÆöÂàÜÊîØ

      - name: Setup Git User
        run: |
          git config --global user.name "GitHub Actions Backup"
          git config --global user.email "actions-backup@users.noreply.github.com"
          git config --global init.defaultBranch main  # ËÆæÁΩÆÈªòËÆ§ÂàÜÊîØ

      - name: Prepare backup environment
        run: |
          # ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
          mkdir -p backups
          # ÂàõÂª∫ÊàêÂäüÂ§á‰ªΩËÆ∞ÂΩïÊñá‰ª∂
          echo "" > success_backups.txt

      - name: Backup repositories
        id: backup
        run: |
          # Â§ÑÁêÜÊØè‰∏™‰ªìÂ∫ìURL
          while IFS= read -r repo_url; do
            # Ë∑≥ËøáÁ©∫Ë°åÂíåÊ≥®Èáä
            [[ -z "$repo_url" || "$repo_url" == \#* ]] && continue
            
            echo "üì¶ Processing: $repo_url"
            
            # ‰ªéURLËß£ÊûêownerÂíårepoÂêçÁß∞
            if [[ $repo_url =~ github.com[/:]([^/]+)/([^/.]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]%.git}"  # ÁßªÈô§.gitÂêéÁºÄ
              backup_dir="backups/$owner/$repo"
              
              # ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
              mkdir -p "$(dirname "$backup_dir")"
              
              # Â§á‰ªΩÈÄªËæë - Â§ÑÁêÜÈ¶ñÊ¨°Â§á‰ªΩ
              if [ -d "$backup_dir" ] && [ -f "$backup_dir/HEAD" ]; then
                echo "üîÑ Updating existing backup..."
                (
                  cd "$backup_dir"
                  git fetch --all --force --tags --prune 2>&1 | sed 's/^/    /'
                )
                status=$?
              else
                echo "‚ú® Creating new backup (first time)..."
                # Á°Æ‰øùÁõÆÂΩï‰∏çÂ≠òÂú®
                rm -rf "$backup_dir" 2>/dev/null || true
                # ÂÆåÊï¥ÂÖãÈöÜ‰ªìÂ∫ì
                git clone --mirror "$repo_url" "$backup_dir" 2>&1 | sed 's/^/    /'
                status=$?
              fi
              
              # Â§ÑÁêÜÂ§á‰ªΩÁªìÊûú
              if [ $status -eq 0 ]; then
                echo "‚úÖ Success: $repo_url"
                # ËÆ∞ÂΩïÊàêÂäüÂ§á‰ªΩÁöÑ‰ªìÂ∫ì
                echo "$owner/$repo" >> success_backups.txt
              else
                echo "‚ùå Backup failed for $repo_url, keeping old version if exists"
                # ÊÅ¢Â§çÂèØËÉΩË¢´‰øÆÊîπÁöÑÊñá‰ª∂
                git checkout -- "$backup_dir" 2>/dev/null || true
              fi
            else
              echo "‚ö†Ô∏è Invalid URL: $repo_url"
            fi
            echo "--------------------------------------------------"
          done < back_ck_url.txt

      - name: Commit changes
        if: always()  # Âç≥‰ΩøÈÉ®ÂàÜÂ§á‰ªΩÂ§±Ë¥•‰πüÂ∞ùËØïÊèê‰∫§
        run: |
          # Ê∑ªÂä†ÊâÄÊúâÂ§á‰ªΩÊñá‰ª∂
          git add backups/
          
          # Ê£ÄÊü•ÊòØÂê¶ÊúâÂèòÊõ¥
          if git diff-index --quiet HEAD --; then
            echo "üü¢ No changes detected"
          else
            # ÁîüÊàêÊèê‰∫§‰ø°ÊÅØ
            commit_msg="üì§ Backup update: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            
            # Ê∑ªÂä†ÊàêÂäüÂ§á‰ªΩÁöÑ‰ªìÂ∫ì
            if [ -s success_backups.txt ]; then
              commit_msg="$commit_msg\n\n‚úÖ Successfully backed up:"
              while IFS= read -r repo; do
                if [ -n "$repo" ]; then
                  commit_msg="$commit_msg\n‚Ä¢ $repo"
                fi
              done < success_backups.txt
            fi
          
            # Ê∑ªÂä†Â§±Ë¥•ÁªüËÆ°ÔºàÂ¶ÇÊûúÊúâÔºâ
            failed_count=$(grep -c "‚ùå" "$GITHUB_STEP_SUMMARY" || true)
            if [ "$failed_count" -gt 0 ]; then
              commit_msg="$commit_msg\n\n‚ùå $failed_count repositories failed backup"
            fi
          
            # Êèê‰∫§ÂèòÊõ¥
            echo -e "$commit_msg" | git commit -F -
            git push
            echo "üöÄ Changes committed and pushed"
          fi

      - name: Report status
        run: |
          # ÂàõÂª∫Â∑•‰ΩúÊµÅÊëòË¶Å
          echo "## üìä Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Repository |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|" >> $GITHUB_STEP_SUMMARY
          
          # Ê∑ªÂä†ÊàêÂäüÂ§á‰ªΩ
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                echo "| ‚úÖ | $repo |" >> $GITHUB_STEP_SUMMARY
              fi
            done < success_backups.txt
          fi
          
          # Ê∑ªÂä†Â§±Ë¥•Â§á‰ªΩ
          grep "‚ùå Backup failed for" $GITHUB_STEP_SUMMARY | sed -E 's/.*‚ùå Backup failed for (.*)/| ‚ùå | \1 |/' >> $GITHUB_STEP_SUMMARY || true
          grep "‚ö†Ô∏è Invalid URL" $GITHUB_STEP_SUMMARY | sed -E 's/.*‚ö†Ô∏è Invalid URL: (.*)/| ‚ö†Ô∏è | Invalid URL: \1 |/' >> $GITHUB_STEP_SUMMARY || true
