name: Repository Backup Automation

on:
  workflow_dispatch:  # 手动触发
  schedule:
    - cron: '0 0 * * *'  # 每天UTC时间0点自动运行

permissions:
  contents: write  # 允许提交更改

jobs:
  backup-repositories:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录
          ref: ${{ github.ref }}  # 明确指定分支

      - name: Setup Git User
        run: |
          git config --global user.name "GitHub Actions Backup"
          git config --global user.email "actions-backup@users.noreply.github.com"
          git config --global init.defaultBranch main  # 设置默认分支

      - name: Prepare backup environment
        run: |
          # 创建备份目录
          mkdir -p backups
          # 创建成功备份记录文件
          echo "" > success_backups.txt
          # 创建失败记录文件
          echo "" > failed_backups.txt

      - name: Backup repositories with retry
        id: backup
        run: |
          # 处理每个仓库URL
          while IFS= read -r repo_url; do
            # 跳过空行和注释
            [[ -z "$repo_url" || "$repo_url" == \#* ]] && continue
            
            echo "📦 Processing: $repo_url"
            
            # 从URL解析owner和repo名称
            if [[ $repo_url =~ github.com[/:]([^/]+)/([^/.]+) ]]; then
              owner="${BASH_REMATCH[1]}"
              repo="${BASH_REMATCH[2]%.git}"  # 移除.git后缀
              backup_dir="backups/$owner/$repo"
              
              # 创建备份目录
              mkdir -p "$(dirname "$backup_dir")"
              
              # 备份状态和重试计数器
              status=1
              retry_count=0
              max_retries=3
              
              # 重试循环
              while [ $status -ne 0 ] && [ $retry_count -lt $max_retries ]; do
                # 备份逻辑
                if [ -d "$backup_dir" ] && [ -f "$backup_dir/HEAD" ]; then
                  echo "🔄 Updating existing backup (attempt $((retry_count+1))..."
                  (
                    cd "$backup_dir"
                    git fetch --all --force --tags --prune 2>&1 | sed 's/^/    /'
                  )
                  status=$?
                else
                  echo "✨ Creating new backup (attempt $((retry_count+1))..."
                  # 确保目录不存在（重试前清理）
                  rm -rf "$backup_dir" 2>/dev/null || true
                  # 完整克隆仓库
                  git clone --mirror "$repo_url" "$backup_dir" 2>&1 | sed 's/^/    /'
                  status=$?
                fi
                
                # 检查状态
                if [ $status -eq 0 ]; then
                  echo "✅ Success on attempt $((retry_count+1)): $repo_url"
                  # 记录成功备份的仓库
                  echo "$owner/$repo" >> success_backups.txt
                  break
                else
                  echo "⚠️ Attempt $((retry_count+1)) failed for $repo_url"
                  retry_count=$((retry_count+1))
                  
                  # 如果不是最后一次尝试，等待5秒再重试
                  if [ $retry_count -lt $max_retries ]; then
                    echo "⏳ Waiting 5 seconds before retry..."
                    sleep 5
                  fi
                fi
              done
              
              # 如果最终失败
              if [ $status -ne 0 ]; then
                echo "❌ Backup failed after $max_retries attempts for $repo_url"
                # 记录失败备份
                echo "$owner/$repo" >> failed_backups.txt
                # 恢复可能被修改的文件
                git restore --staged "$backup_dir" || true
                git restore "$backup_dir" || true
              fi
            else
              echo "⚠️ Invalid URL: $repo_url"
              echo "$repo_url (invalid)" >> failed_backups.txt
            fi
            echo "--------------------------------------------------"
          done < back_ck_url.txt

      - name: Commit changes
        if: always()  # 即使部分备份失败也尝试提交
        run: |
          # 添加所有备份文件
          git add backups/
          
          # 检查是否有变更
          if git diff-index --quiet HEAD --; then
            echo "🟢 No changes detected"
          else
            # 生成提交信息
            commit_msg="📤 Backup update: $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
            
            # 添加成功备份的仓库
            if [ -s success_backups.txt ]; then
              commit_msg="$commit_msg\n\n✅ Successfully backed up:"
              while IFS= read -r repo; do
                if [ -n "$repo" ]; then
                  commit_msg="$commit_msg\n• $repo"
                fi
              done < success_backups.txt
            fi
          
            # 添加失败备份的仓库
            if [ -s failed_backups.txt ]; then
              commit_msg="$commit_msg\n\n❌ Failed to backup:"
              while IFS= read -r repo; do
                if [ -n "$repo" ]; then
                  commit_msg="$commit_msg\n• $repo"
                fi
              done < failed_backups.txt
            fi
          
            # 提交变更
            echo -e "$commit_msg" | git commit -F -
            git push
            echo "🚀 Changes committed and pushed"
          fi

      - name: Report status
        run: |
          # 创建工作流摘要
          echo "## 📊 Backup Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Status | Repository | Attempts |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|------------|----------|" >> $GITHUB_STEP_SUMMARY
          
          # 添加成功备份
          if [ -s success_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                # 从日志中提取尝试次数
                attempts=$(grep -A 10 "📦 Processing: .*$repo" $GITHUB_STEP_SUMMARY | grep -m 1 "✅ Success on attempt" | awk '{print $4}' | cut -d: -f1 || echo "1")
                echo "| ✅ | $repo | $attempts |" >> $GITHUB_STEP_SUMMARY
              fi
            done < success_backups.txt
          fi
          
          # 添加失败备份
          if [ -s failed_backups.txt ]; then
            while IFS= read -r repo; do
              if [ -n "$repo" ]; then
                # 检查是否是无效URL
                if [[ "$repo" == *"(invalid)" ]]; then
                  echo "| ⚠️ | $repo | - |" >> $GITHUB_STEP_SUMMARY
                else
                  # 从日志中提取尝试次数
                  attempts=$(grep -A 10 "📦 Processing: .*$repo" $GITHUB_STEP_SUMMARY | grep -m 1 "❌ Backup failed after" | awk '{print $5}' || echo "$max_retries")
                  echo "| ❌ | $repo | $attempts |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done < failed_backups.txt
          fi
